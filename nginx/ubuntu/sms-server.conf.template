# This Nginx configuration template is for Ubuntu 22.04 or above only #

map $http_upgrade $connection_upgrade {
  default upgrade;
  '' close;
}

upstream ws_servers {
  # Select either one method to use, but not both.
  # 1. Enable sticky session based on IP address
  #ip_hash;
  # 2. Enable the least user number connection
  least_conn;

  # Default it has 2 application server instances. If more application server instances are needed, add them manually.
  # Note: 1. An unique local IP address for one application server instance.
  #       2. On Ubuntu 22.04, you may configure multiple IP addresses to one physical or virtual network card by amend
  #          network configuration file "/etc/netplan/<network config file name>" as example
  #          below: 
  #
  #          Suppose the network configuration file name is '00-installer-config.yaml' and device name is 'enp0s3'.
  #          ...........           
  #          ethernets:
  #            enp0s3:
  #              addresses:
  #              - 192.168.1.80/24
  #              - 192.168.1.81/24
  #              - 192.168.1.82/24
  #          ...........    
  server {local_ip_01}:8444;
  server {local_ip_02}:8444;
}

server {
  listen 80;
  server_name {msg_site_server_name};

  add_header Allow "GET, POST, HEAD" always;
  if ($request_method !~ ^(GET|POST|HEAD)$) {
    return 405;
  }

  return 301 https://$host:8443;
}

#----------------------------
# certbot can't handle SSL certificates modification for multiple sections. Therefore, only one SSL section
# must be left. If you need to auto-redirection on port 443, you must amended it manually after SMS 2.0
# installation.
# ---------------------------
#server {
#  listen 443 ssl;
#  http2 on; 
#  server_name {msg_site_server_name};
#  root /www/sms2;
#
#  sendfile            on;
#  tcp_nopush          on;
#  tcp_nodelay         on;
#  keepalive_timeout   65;
#  types_hash_max_size 2048;
#  client_header_buffer_size 64k;
#  client_body_buffer_size 64k;
#  client_max_body_size 256M;
#  large_client_header_buffers 2 64k;
#  server_tokens       off;
#
#  default_type        application/octet-stream;
#  charset             UTF-8;
#
#  access_log /var/log/nginx/sms-access.log main;
#
#  ssl_certificate "/etc/ssl/certs/message-site.crt";
#  ssl_certificate_key "/etc/ssl/private/message-site.key";  
#  ssl_protocols TLSv1.2 TLSv1.3; 
#  ssl_session_cache shared:SSL:1m;
#  ssl_session_timeout  10m;
#  ssl_ciphers "ECDHE-RSA-AES256-GCM-SHA384 EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA !RC4 !SHA1 !SHA256 !SHA384 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS";
#  ssl_prefer_server_ciphers on;
#  ssl_dhparam /etc/nginx/dhparam.pem;
#
#  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
#  add_header X-Frame-Options "SAMEORIGIN";
#  add_header X-XSS-Protection "1; mode=block";
#  add_header X-Content-Type-Options nosniff;
#  add_header X-Permitted-Cross-Domain-Policies master-only;
#
#  add_header Allow "GET, POST, HEAD" always;
#  if ($request_method !~ ^(GET|POST|HEAD)$) {
#    return 405;
#  }
#
#  return 301 https://$host:8443;
#}

server {
  listen 8443 ssl;
  http2 on; 
  server_name {msg_site_server_name};
  root /www/sms2;

  sendfile            on;
  tcp_nopush          on;
  tcp_nodelay         on;
  keepalive_timeout   65;
  types_hash_max_size 2048;
  client_header_buffer_size 64k;
  client_body_buffer_size 64k;
  client_max_body_size 256M;
  large_client_header_buffers 2 64k;
  server_tokens       off;

  include             /etc/nginx/mime.types;
  default_type        application/octet-stream;
  charset             UTF-8;

  access_log /var/log/nginx/sms-access.log main;

  ssl_certificate "/etc/ssl/certs/message-site.crt";
  ssl_certificate_key "/etc/ssl/private/message-site.key";  
  ssl_protocols TLSv1.2 TLSv1.3; 
  ssl_session_cache shared:SSL:1m;
  ssl_session_timeout  10m;
  ssl_ciphers "ECDHE-RSA-AES256-GCM-SHA384 EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA !RC4 !SHA1 !SHA256 !SHA384 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS";
  ssl_prefer_server_ciphers on;
  ssl_dhparam /etc/nginx/dhparam.pem;

  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
  add_header X-Frame-Options "SAMEORIGIN";
  add_header X-XSS-Protection "1; mode=block";
  add_header X-Content-Type-Options nosniff;
  add_header X-Permitted-Cross-Domain-Policies master-only;

  add_header Allow "GET, POST, HEAD" always;
  if ($request_method !~ ^(GET|POST|HEAD)$) {
    return 405;
  }

  if ($http_user_agent ~* LWP::Simple|wget|curl|Go-http-client|python-urllib|GensysInspect) {
    return 403;
  }

  location / {
    proxy_http_version 1.1;
    proxy_set_header Host $http_host;
    proxy_set_header Connecton "";
    proxy_set_header X-Forwarded-For $remote_addr;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_headers_hash_max_size 512;
    proxy_headers_hash_bucket_size 128; 
    proxy_connect_timeout 120;
    proxy_send_timeout 120;
    proxy_read_timeout 120;
    proxy_pass http://ws_servers;
  }

  location /ws {
    # For WebSocket proxy # 
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";
    # Need Nginx 1.15.6 or above #
    proxy_socket_keepalive on;
    # Idle socket connection will be closed in 90 sec #
    # Note: "Ping-Pong" exchange mechanism must be implemented on client and server sides
    #       to keep a WebSocket connection opened longer than 90 seconds.
    proxy_read_timeout 90;
    proxy_redirect off;
    proxy_headers_hash_max_size 512;
    proxy_headers_hash_bucket_size 128;  
    proxy_set_header Host $http_host;
    proxy_set_header X-Forwarded-For $remote_addr;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $server_name;
    proxy_pass http://ws_servers;
  }

  location ^~ /package.json {
    return 404;
  }

  location ^~ /package-lock.json {
    return 404;
  }

  location ^~ /node_modules {
    deny all;
  }

  location ^~ /etc {
    deny all;
  }

  location ^~ /lib {
    deny all;
  }

  location ^~ /smsserver.js {
    return 404;
  }
  
  location ^~ /delete_expired_session.js {
    return 404;
  }

  location ^~ /delete_private_message.js {
    return 404;
  }

  location ^~ /delete_old_message.js {
    return 404;
  }

  location ^~ /new_message_inform.js {
    return 404;
  }

  location ^~ /event_reminder.js {
    return 404;
  }  
  
  location ^~ /pm2-sms-server.json {
    return 404;
  }
  
  location /itnews/data {
    if ($http_cookie !~ "MSG_USER") {
      return 403;
    }
  }  
}

